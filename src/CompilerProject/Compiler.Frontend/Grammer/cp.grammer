PASS 0

// NameTypePair
NameTypePair => [Name]Identifier, DoublePoint, [Type]Identifier

InvokeNodeName => [Target]Identifier, OpenRoundBracket

// Const Name ProcedureNode                   
ProcedureNode => [Name]Identifier, DoubleDouble


AttributeNodeName => At, [Name]Identifier

PASS 1                  


//Not
ExprNode => [Value]UnaryOperator => [Operator]Not, [Argument]ExprNode

//AndBitwise
ExprNode => [Value]AndBitWiseNode => [A]ExprNode, AndBitWise, [B]ExprNode

//AndBool
ExprNode => [Value]AndBoolNode => [A]ExprNode, AndBool, [B]ExprNode

// DivisionNode
ExprNode => [Value]DivisionNode => [A]ExprNode, Divide, [B]ExprNode

// MultiplicationNode                    
ExprNode => [Value]MultiplicationNode => [A]ExprNode, Multiply, [B]ExprNode

ExprNode => [Value]MultiplicationNode => [A]ExprNode, Multiply, [B]ExprNode

PASS 2

// AdditionNode                    
ExprNode => [Value]AdditionNode => [A]ExprNode, Plus, [B]ExprNode

// SubtractionNode
ExprNode => [Value]SubtractionNode => [A]ExprNode, Minus, [B]ExprNode

//OrBool
ExprNode => [Value]OrBoolNode => [A]ExprNode, OrBool, [B]ExprNode

//EqBool
ExprNode => [Value]EqNode => [A]ExprNode, EqBool, [B]ExprNode

// ComparisonNode
ExprNode => [Value]ComparisonNode => [A]ExprNode, [Operator]LessThan, [B]ExprNode
ExprNode => [Value]ComparisonNode => [A]ExprNode, [Operator]GreaterThan, [B]ExprNode

// ListNode A
ListNode => [A]NameTypePair, Comma, [B]NameTypePair
ListNode => [A]ListNode, Comma, [B]NameTypePair
InvokeListNode => [A]InvokeListNode, Comma, [B]ExprNode
InvokeListNode => [A]ExprNode, Comma, [B]ExprNode

      
PASS 3
             



// ProcedureArgsNode List
ProcedureArgsNode => OpenRoundBracket, [Args]ListNode, CloseRoundBracket

// ProcedureArgsNode Pair
ProcedureArgsNode => OpenRoundBracket, [Args]NameTypePair, CloseRoundBracket
ProcedureArgsNode => OpenRoundBracket, CloseRoundBracket

// InvokeNode
StatementNode => [Value]InvokeNode => [Target]InvokeNodeName, [Arguments]InvokeListNode, CloseRoundBracket, SemiColon
StatementNode => [Value]InvokeNode => [Target]InvokeNodeName, [Arguments]ExprNode, CloseRoundBracket, SemiColon
StatementNode => [Value]InvokeNode => [Target]InvokeNodeName, CloseRoundBracket, SemiColon

PASS 4

// AssignmentNode

StatementNode => [Value]AssignmentNode => [Name]ExprNode, Eq, [Value]ExprNode, SemiColon
StatementNode => [Value]AssignmentNode => [Name]ExprNode, Eq, [Value]StatementNode

// DeclNode         
         
StatementNode => [Value]DeclNode => [Name]ExprNode, DoubleEq, [Value]ExprNode, SemiColon
StatementNode => [Value]DeclNode => [Name]ExprNode, DoubleEq, [Value]StatementNode  


// Merge CodeBlockList
CodeBlockList => [A]CodeBlockList, [B]StatementNode
CodeBlockList => [A]StatementNode, [B]CodeBlockList
CodeBlockList => [A]StatementNode, [B]StatementNode
CodeBlockList => [A]CodeBlockList, [B]CodeBlockList
CodeBlockList => [A]CodeBlock, [B]CodeBlock

CodeBlock => OpenCurlyBracket, [Body]CodeBlockList ,CloseCurlyBracket
CodeBlock => OpenCurlyBracket, [Body]StatementNode ,CloseCurlyBracket

CodeBlock => OpenCurlyBracket, CloseCurlyBracket

StatementNode => [Value]IfNode => If, [Condition]ExprNode, [Body]CodeBlock
StatementNode => [Value]LoopNode => Loop, [Condition]ExprNode, [Body]CodeBlock




PASS 5


ProcedureNode => [Name]ProcedureNode, [Args]ProcedureArgsNode, Arrow, [ReturnType]ExprNode, SemiColon
ProcedureNode => [Name]ProcedureNode, [Args]ProcedureArgsNode, SemiColon




CodeBlock => OpenCurlyBracket, [Body]CodeBlockList ,CloseCurlyBracket
CodeBlock => OpenCurlyBracket, [Body]StatementNode ,CloseCurlyBracket

CodeBlock => OpenCurlyBracket, CloseCurlyBracket

// ProcedureNode             
ProcedureNode => [Name]ProcedureNode, [Args]ProcedureArgsNode, Arrow, [ReturnType]ExprNode, [Body]CodeBlock       
ProcedureNode => [Name]ProcedureNode, [Args]ProcedureArgsNode, [Body]CodeBlock

PASS 6

//Attribute
AttributeNode => [Name]AttributeNodeName, [Client]ProcedureNode